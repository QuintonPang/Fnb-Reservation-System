@inject HttpClient Http
@inject AuthenticationStateProvider   AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@using System.Threading;

<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Queue Management</MudText>
                </MudCardContent>

                <MudCardContent>
                    <MudTable Items="queues" Hover="true" Bordered="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Queue ID</MudTh>
                                                        <MudTh>Customer Name</MudTh>
                                                        <MudTh>Contact Number</MudTh>

                            <MudTh>Number of Guests</MudTh>
                                                        <MudTh>Special Requests</MudTh>
                                                        <MudTh>Tables</MudTh>

                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Queue ID">@context.Queue.Id</MudTd>
                            <MudTd DataLabel="Name">@context.Queue.CustomerName</MudTd>
                                                                                    <MudTd DataLabel="Name">@context.Queue.ContactNumber</MudTd>

                                                        <MudTd DataLabel="Name">@context.Queue.NumberOfGuests</MudTd>
                                                        <MudTd DataLabel="Name">@context.Queue.SpecialRequests</MudTd>
  <MudTd DataLabel="Table IDs">
            @if (context.TableIds != null && context.TableIds.Any())
            {
                <ul>
                    @foreach (var tableId in context.TableIds)
                    {
                        <li>@tableId</li> 
                    }
                </ul>
            }
            else
            {
                <span>No tables assigned</span> 
            }
        </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButton Color="Color.Primary" @onclick="() => DequeueAsync(context.Queue.Id)" Disabled="@context.Queue.IsSeated">
                                    Seat
                                </MudButton>
                                <!-- <MudButton Color="Color.Error" @onclick="() => RemoveQueueAsync(context.Queue.Id)">
                                    Remove
                                </MudButton> -->
                                <MudButton Color="Color.Error" @onclick="() => NoShowQueueAsync(context.Queue.Id)">
                                    No Show
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
     [Parameter] public int outletId { get; set; }
    
    private List<QueueWithTablesDto> queues = new List<QueueWithTablesDto>();
        private Timer _timer;
 


protected override async Task OnParametersSetAsync()
{  try
    {
        Console.WriteLine("OUTLETID",outletId);
        var response = await Http.GetFromJsonAsync<List<QueueWithTablesDto>>("http://localhost:5274/api/Queue?outletId=" + outletId);
        if (response != null)
        {
            queues = response;
        }
        else
        {
            // Handle error (you can display an error message or log it)
            queues = new List<QueueWithTablesDto>();
        }
    }
    catch (Exception ex)
    {
        // Log or handle the exception appropriately
        queues = new List<QueueWithTablesDto>();
    }
}
 protected override async Task OnInitializedAsync()
{


    try
    {

          _timer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>         {
 var response = await Http.GetFromJsonAsync<List<QueueWithTablesDto>>("http://localhost:5274/api/Queue?outletId=" + outletId);
                    Console.WriteLine("QQQQ");

        if (response != null)
        {
            queues = response;
                        Console.WriteLine("QQQQ2");
                                                StateHasChanged(); // Ensure UI updates after error


        }
        else
        {
            // Handle error (you can display an error message or log it)
            queues = new List<QueueWithTablesDto>();
        }

            });
        }, null, 0, 3000);  // Fetch every 1 second (1000ms)
       
    }
    catch (Exception ex)
    {
        // Log or handle the exception appropriately
        queues = new List<QueueWithTablesDto>();
    }
}


    private async Task DequeueAsync(int id)
    {
        // Call the API to mark the queue as seated (dequeue)
        var response = await Http.PutAsync($"http://localhost:5274/api/Queue/{id}/dequeue", null);
        
        if (response.IsSuccessStatusCode)
        {
            // Refresh the list of queues
            queues = await Http.GetFromJsonAsync<List<QueueWithTablesDto>>("http://localhost:5274/api/Queue?outletId=" + outletId);
        }
    }

    private async Task RemoveQueueAsync(int id)
    {
        // Call the API to remove the queue entry
        var response = await Http.DeleteAsync($"http://localhost:5274/api/Queue/{id}");
        
        if (response.IsSuccessStatusCode)
        {
            // Refresh the list of queues
            queues = await Http.GetFromJsonAsync<List<QueueWithTablesDto>>("http://localhost:5274/api/Queue");
        }
    }
    private async Task NoShowQueueAsync(int id)
    {
        // Call the API to remove the queue entry
        var response = await Http.PutAsync($"http://localhost:5274/api/Queue/{id}/noShow", null);
        
        if (response.IsSuccessStatusCode)
        {
            // Refresh the list of queues
            queues = await Http.GetFromJsonAsync<List<QueueWithTablesDto>>("http://localhost:5274/api/Queue");
        }
    }

    // Queue model to match the API response
    public class Queue
    {
        public int Id { get; set; }
        public bool IsSeated { get; set; }
        public string CustomerName { get; set; }
    public string ContactNumber { get; set; }
    public int NumberOfGuests { get; set; }
    public string SpecialRequests { get; set; }
 
    }

    public class QueueWithTablesDto
{
    public Queue Queue { get; set; }
    public List<string> TableIds { get; set; }
}

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
