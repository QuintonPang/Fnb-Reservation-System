@page "/reservation-management"
@inject HttpClient Http
@using System.Threading;

<h3>Reservation Management</h3>

@if (reservations == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else if (!reservations.Any())
{
    <MudAlert Severity="Severity.Info">No reservations found.</MudAlert>
}
else
{
    <MudTable Items="reservations" Hover="true" Dense="true">
        <HeaderContent>
            <MudTh>Customer</MudTh>
            <MudTh>Contact</MudTh>
            <MudTh>Date & Time</MudTh>
            <MudTh>Guests</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.CustomerName</MudTd>
            <MudTd>@context.ContactNumber</MudTd>
            <MudTd>@context.ReservationDateTime.ToString("g")</MudTd>
            <MudTd>@context.NumberOfGuests</MudTd>
            <MudTd>@context.Status</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="@((context.Status !="Pending"))" OnClick="@(() => Done(context.Id))">
                    Complete
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => UpdateStatus(context.Id, "Confirmed"))" Disabled="@((context.Status !="Pending"))" Class="ml-2">
                    Confirm
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => UpdateStatus(context.Id, "Cancelled"))" Disabled="@((context.Status !="Pending"))"  Class="ml-2">
                    Cancel
                </MudButton>
                 <MudButton  Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => UpdateStatus(context.Id, "NoShow"))"  Disabled="@((context.Status !="Pending"))" Class="ml-2">
                    No Show
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<Reservation> reservations;
     [Parameter] public int outletId { get; set; }
        private Timer _timer;

protected override async Task OnParametersSetAsync()
{
 try
        {
            reservations = await Http.GetFromJsonAsync<List<Reservation>>("http://localhost:5274/api/Reservation?outletId=" + outletId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching reservations: {ex.Message}");
        }
}
    protected override async Task OnInitializedAsync()
    {
        
        try
        {
              _timer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>         {
            reservations = await Http.GetFromJsonAsync<List<Reservation>>("http://localhost:5274/api/Reservation?outletId=" + outletId);
                        StateHasChanged(); // Ensure UI updates after error

            });
        }, null, 0, 3000);  // Fetch every 1 second (1000ms)
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching reservations: {ex.Message}");
        }
    }

    private async Task UpdateStatus(int id, string status)
    {


        var updateRequest = new { CustomerName="",ContactNumber="",Status = status };

        

        var response = await Http.PutAsJsonAsync($"http://localhost:5274/api/Reservation/{id}/status", updateRequest);
        if (response.IsSuccessStatusCode)
        {
                       reservations = await Http.GetFromJsonAsync<List<Reservation>>("http://localhost:5274/api/Reservation?outletId=" + outletId);

      
        }
    }
    private async Task Done(int id)
    {
        var response = await Http.PutAsync($"http://localhost:5274/api/Reservation/{id}/done", null);
        if (response.IsSuccessStatusCode)
        {
                      reservations = await Http.GetFromJsonAsync<List<Reservation>>("http://localhost:5274/api/Reservation?outletId=" + outletId);

        }
    }

    public class Reservation
    {
        public int Id { get; set; }
        public string CustomerName { get; set; }
        public string ContactNumber { get; set; }
        public DateTime ReservationDateTime { get; set; }
        public int NumberOfGuests { get; set; }
        public string Status { get; set; }
        public int OutletId { get; set; }
    }


    public void Dispose()
    {
        _timer?.Dispose();
    }
}
